using UnityEngine;
using System.Collections;

public class Weights : MonoBehaviour
{
    int[,] OBoardWeight = new int[,]
    {
        /*{0,  0,  0,  0,  0,  0,  0,  0},
       {50, 50, 50, 50, 50, 50, 50, 50},
        {10, 10, 20, 30, 30, 20, 10, 10},
        {5,  5, 10, 25, 25, 10,  5,  5},
        {0,  0,  0, 20, 20,  0,  0,  0},
        {5, -5,-10,  0,  0,-10, -5,  5},
        {5, 10, 10,-20,-20, 10, 10,  5},
        {0,  0,  0,  0,  0,  0,  0,  0}*/

		{0,  0,  0,  0, 0,0,0,  0,  0,  0},
		{50, 50, 50, 50,50,50,50,  50, 50, 50},
		{10, 10, 20, 30, 30,30,30, 20, 10, 10},
		{5,  5, 10, 25, 25,25,25, 10,  5,  5},
		{0,  0,  0, 20,20,20,20 ,  0,  0,  0},
		{0,  0,  0, 20,20,20,20 ,  0,  0,  0},
		{0,  0,  0, 20, 20,20,20 , 0,  0,  0},
		{5, -5,-10, -10, 0,0,-10, -10, -5,  5},
		{5, 10, 10,10,-20,-20,10, 10, 10,  5},
		{50, 50, 50, 50,50,50,50,  50, 50, 50}

		/*{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0}*/
    };

    int[,] OMirrorBoardWeight = new int[,]
    {
        /*{0,  0,  0,  0,  0,  0,  0,  0},
        {5, 10, 10,-20,-20, 10, 10,  5},
        {5, -5,-10,  0,  0,-10, -5,  5},
        {0,  0,  0, 20, 20,  0,  0,  0},
        {5,  5, 10, 25, 25, 10,  5,  5},
        {10, 10, 20, 30, 30, 20, 10, 10},
        {50, 50, 50, 50, 50, 50, 50, 50},
        {0,  0,  0,  0,  0,  0,  0,  0}

		{0,  0,  0, 0,0,0, 0,  0,  0,  0},
		{5, 10, 10,-20,-20,-20,-20, 10, 10,  5},
		{5, -5,-10, 0, 0,0,0, -10, -5,  5},
		{0,  0,  0, 20, 20,20,20 , 0,  0,  0},
		{0,  0,  0, 20, 20,20,20,  0,  0,  0},
		{0,  0,  0, 20, 20,20,20,  0,  0,  0},
		{5,  5, 10, 10,25,25,10,  10,  5,  5},
		{10, 10, 20, 20,30,30,20, 20, 10, 10},
		{50, 50, 50, 50, 50,50,50,50, 50, 50},
		{0,  0,  0,  0, 0,0,0,  0,  0,  0} */

		{0,  0,  0,  0, 0,0,0,  0,  0,  0},
		{5, 10, 10,10,-20,-20,10, 10, 10,  5},
		{5, -5,-10, -10, 0,0,-10, -10, -5,  5},
		{0,  0,  0, 20,20,20,20 ,  0,  0,  0},
		{0,  0,  0, 20,20,20,20 ,  0,  0,  0},
		{0,  0,  0, 20, 20,20,20 , 0,  0,  0},
		{5,  5, 10, 25, 25,25,25, 10,  5,  5},
		{10, 10, 20, 30, 30,30,30, 20, 10, 10},
		{50, 50, 50, 50,50,50,50,  50, 50, 50},
		{0,  0,  0,  0, 0,0,0,  0,  0,  0}

		/*{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0}*/

    };

   

    int[,] XBoardWeight = new int[,]
    {
        /*{-20,-10,-10, -5, -5,-10,-10,-20},
        {-10,  0,  0,  0,  0,  0,  0,-10},
        {-10,  0,  5,  5,  5,  5,  0,-10},
        {-5,  0,  5,  5,  5,  5,  0, -5},
        {0,  0,  5,  5,  5,  5,  0, -5},
        {-10,  5,  5,  5,  5,  5,  0,-10},
        {-10,  0,  5,  0,  0,  0,  0,-10},
        {-20,-10,-10, -5, -5,-10,-10,-20}*/

		/*{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20},
		{-10,  0,  0,  0, 0, 0,0, 0,  0,-10},
		{-10,  0,  5,  5, 5,5,5,  5,  0,-10},
		{-5,  0,  5,  5, 5,5,5,   5,  0, -5},
		{0,  0,  5,  5, 5, 5,5,  5,  0, -5},
		{0,  0,  5,  5,  5,5,5,  5,  0, -5},
		{-10,  5,  5,  5, 5, 5,5, 5,  0,-10},
		{-10,  0,  5,  0, 0, 0,0, 0,  0,-10},
		{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20},
		{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20}*/

		/*{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20}*/

		{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0}
    };

    int[,] XMirrorBoardWeight = new int[,]
    {
        /*{-20,-10,-10, -5, -5,-10,-10,-20},
        {-10,  0,  5,  0,  0,  0,  0,-10},
        {-10,  5,  5,  5,  5,  5,  0,-10},
        {0,  0,  5,  5,  5,  5,  0, -5},
        {-5,  0,  5,  5,  5,  5,  0, -5},
        {-10,  0,  5,  5,  5,  5,  0,-10},
        {-10,  0,  0,  0,  0,  0,  0,-10},
        {-20,-10,-10, -5, -5,-10,-10,-20}*/

		/*{-20,-10,-10,-5,-5,-5, -5,-10,-10,-20},
		{-10,  0,  5,0,  0, 0,0,  0,  0,-10},
		{-10,  5,  5,5,  5, 5,5,   5,  0,-10},
		{0,  0,  5, 5, 5,   5,5, 5,  0, -5},
		{0,  0,  5, 5, 5,  5,5,  5,  0, -5},
		{-5,  0,  5, 5, 5,5,5,    5,  0, -5},
		{-10,  0,  5, 5, 5,5,5,   5,  0,-10},
		{-10,  0,  0, 0, 0, 0,0,  0,  0,-10},
		{-20,-10,-10,-5, -5,-5,-5,-10,-10,-20},
		{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20}*/

		/*{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-200,-100,-100, -50,-50,-50,-50, -100,-100,-200},
		{-20,-10,-10, -5,-5,-5,-5, -10,-10,-20}*/

		{-5,  -5,  -5,  -5,  -5,  -5,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{-5,  0,  0,  -5,  0,  0,  -5,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0},
		{0,  0,  0,  0,  0,  0,  0,  0,0,0}
    };

    

	public int GetBoardWeight(Piece.pieceType type, Vector2 position, Piece.pieceWork color)
    {
        switch (type)
        {
		case Piece.pieceType.O:
			if (color == Piece.pieceWork.WWORK)
				return OBoardWeight [(int)position.x, (int)position.y];
			else if (color == Piece.pieceWork.BWORK)
				return OMirrorBoardWeight [(int)position.x, (int)position.y];
			else
				return -1;
		case Piece.pieceType.X:
			if (color == Piece.pieceWork.WWORK)
				return XBoardWeight [(int)position.x, (int)position.y];
			else if (color == Piece.pieceWork.BWORK)
				return XMirrorBoardWeight [(int)position.x, (int)position.y];
			else
				return -1;
            default:
                return -1;
        }
    }

    public int GetPieceWeight(Piece.pieceType type)
    {
        switch (type)
        {
            case Piece.pieceType.O:
                return 1;
            case Piece.pieceType.X:
                return 9;
			case Piece.pieceType.WFLAG:
                return 10000;
			case Piece.pieceType.BFLAG:
				return 10000;
            default:
                return -1;
        }
    }
}
